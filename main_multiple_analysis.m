% Import project-wide constants
constants
    
ALL_MOUSE_NAMES = {
    'Mouse12-120806', ...
    'Mouse12-120807', ...
    'Mouse12-120808', ...
    'Mouse12-120809', ...
    'Mouse12-120810', ...
    'Mouse17-130125', ...
    'Mouse17-130128', ...
    'Mouse17-130129', ...
    'Mouse17-130130', ...
    'Mouse17-130131', ...
    'Mouse17-130201', ...
    'Mouse17-130202', ...
    'Mouse17-130203', ...
    'Mouse17-130204', ...
    'Mouse20-130514', ...
    'Mouse20-130515', ...
    'Mouse20-130516', ...
    'Mouse20-130517', ...
    'Mouse20-130520', ...
    'Mouse24-131213', ...
    'Mouse24-131216', ...
    'Mouse24-131217', ...
    'Mouse24-131218', ...
    'Mouse25-140123', ...
    'Mouse25-140124', ...
    'Mouse25-140128', ...
    'Mouse25-140129', ...
    'Mouse25-140130', ...
    'Mouse25-140131', ...
    'Mouse25-140203', ...
    'Mouse25-140204', ...
    'Mouse25-140205', ...
    'Mouse25-140206', ...
    'Mouse28-140310', ...
    'Mouse28-140311', ...
    'Mouse28-140312', ...
    'Mouse28-140313', ...
    'Mouse28-140317', ...
    'Mouse28-140318'
    };


BEHAVIORAL_STATE = 'wake'; % 'wake', 'rem', 'sws'

SOFTWARE_PATH = 'J:\or\software\';
DATA_PATH = 'J:\or\data\';

addpath([SOFTWARE_PATH 'crcns-hc2-scripts']);
addpath([SOFTWARE_PATH 'custom_scripts']);

%%

for mouse_name = ALL_MOUSE_NAMES
    fprintf('Working on mouse %s\n', mouse_name{1});
    for behavioral_state = {'wake', 'rem', 'sws'}
        fprintf('Working on state %s\n', behavioral_state{1});
        continue;

        tic

        % Load data
        [T, G, Ang, wake, rem, sws] = load_mouse_data(DATA_PATH, mouse_name{1});

        % Analyse data according to behavioral state
        switch behavioral_state{1}
            case 'wake'
                period = wake;
            case 'rem'
                period = rem;
            case 'sws'
                period = sws;
        end

        [full_neuron_firing_per_bin, reduced_data, angle_per_temporal_bin] = analyze_neuronal_and_behavioral_data(T, G, Ang, period);

        spike_rate_mat_neuron_by_angle = calculate_spike_rate_neuron_by_angle(T, G, Ang, wake);

        estimated_head_direction_angle_per_sample_index = estimate_head_direction(spike_rate_mat_neuron_by_angle, full_neuron_firing_per_bin);

        % Save results to mouse folder
        save_analysis_results(DATA_PATH, mouse_name{1}, behavioral_state{1}, reduced_data, angle_per_temporal_bin, spike_rate_mat_neuron_by_angle, estimated_head_direction_angle_per_sample_index);

        toc
    end
end
